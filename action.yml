name: 'Claude Code Changelog'
description: 'Generate changelog using Claude Code based on git diff from last tag'
author: 'mistricky'
branding:
  icon: 'file-text'
  color: 'orange'

inputs:
  github_token:
    description: 'GitHub token with repo access'
    required: true
    default: ${{ github.token }}
  anthropic_api_key:
    description: 'Anthropic API key for Claude'
    required: false
  small_fast_model:
    description: 'Use small fast model for Claude'
    required: false
    default: ''
  api_base_url:
    description: 'API base URL for Claude (optional, defaults to Anthropic API)'
    required: false
  from_tag:
    description: 'Start tag for diff (defaults to latest tag)'
    required: false
  to_ref:
    description: 'End reference for diff'
    required: false
    default: 'HEAD'
  model:
    description: 'Claude model to use'
    required: false
    default: 'claude-3-5-sonnet-20241022'
  use_bedrock:
    description: 'Use Amazon Bedrock'
    required: false
    default: 'false'
  use_vertex:
    description: 'Use Google Vertex AI'
    required: false
    default: 'false'
  bedrock_region:
    description: 'AWS Bedrock region'
    required: false
    default: 'us-east-1'
  vertex_project_id:
    description: 'Google Cloud Project ID'
    required: false
  vertex_region:
    description: 'Google Cloud region'
    required: false
    default: 'us-central1'

outputs:
  changes_count:
    description: 'Number of changes analyzed'
    value: ${{ steps.output.outputs.changes_count }}
  from_tag:
    description: 'Starting tag used for analysis'
    value: ${{ steps.output.outputs.from_tag }}
  to_ref:
    description: 'Ending reference used for analysis'  
    value: ${{ steps.output.outputs.to_ref }}

runs:
  using: 'composite'
  steps:
    - name: Prepare git diff for Claude analysis
      id: prepare
      shell: bash
      run: |
        # Get the from tag if not specified
        if [ -z "${{ inputs.from_tag }}" ]; then
          FROM_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$FROM_TAG" ]; then
            echo "No tags found, using initial commit"
            FROM_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
        else
          FROM_TAG="${{ inputs.from_tag }}"
        fi
        
        TO_REF="${{ inputs.to_ref }}"
        
        echo "from_tag=$FROM_TAG" >> $GITHUB_OUTPUT
        echo "to_ref=$TO_REF" >> $GITHUB_OUTPUT
        
        # Get git log and diff
        echo "Getting changes from $FROM_TAG to $TO_REF"
        
        # Create comprehensive diff analysis
        git log --oneline "$FROM_TAG..$TO_REF" > /tmp/commits.log || true
        git diff --stat "$FROM_TAG..$TO_REF" > /tmp/diff_stat.log || true
        git diff "$FROM_TAG..$TO_REF" > /tmp/full_diff.log || true
        
        # Count commits and files
        COMMIT_COUNT=$(git rev-list --count "$FROM_TAG..$TO_REF" 2>/dev/null || echo "0")
        echo "changes_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
        
        # Create analysis prompt for Claude
        cat > /tmp/changelog_prompt.md << EOF
        You are a technical writer creating a changelog for a software project. 

        Your task is to:
        1. Use the git tools available to you to analyze the changes from $FROM_TAG to $TO_REF
        2. Read the commit logs, file changes, and diffs to understand what changed
        3. Generate a professional changelog in markdown format
        4. Write the final changelog to a file named 'generated_changelog.md'

        Please analyze the git changes and create a changelog with these guidelines:

        ## Categorization:
        Use standard changelog categories:
        - **Added**: New features
        - **Changed**: Changes in existing functionality  
        - **Deprecated**: Soon-to-be removed features
        - **Removed**: Removed features
        - **Fixed**: Bug fixes
        - **Security**: Security improvements

        ## Writing Style:
        - Write clear, user-focused descriptions
        - Explain what changed from a user's perspective
        - Note any breaking changes or migration requirements
        - Use concise bullet points starting with action verbs
        - Group related changes together
        - Focus on semantic meaning rather than technical implementation

        ## Output Format:
        Generate only the changelog content in markdown format without explanatory text or metadata. Do not include version numbers or dates.

        ## Git Analysis Range:
        - From: $FROM_TAG
        - To: $TO_REF

        Start by running git commands to analyze the changes, then output the final changelog content directly.
        EOF

    - name: Generate changelog with Claude Code Base Action
      id: claude
      uses: anthropics/claude-code-base-action@beta
      with:
        claude_env: |
          ANTHROPIC_AUTH_TOKEN: ${{ inputs.anthropic_api_key }}
          ANTHROPIC_BASE_URL: ${{ inputs.api_base_url }}
          ANTHROPIC_MODEL: ${{ inputs.model }}
          ANTHROPIC_SMALL_FAST_MODEL: ${{ inputs.small_fast_model }}
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        use_bedrock: ${{ inputs.use_bedrock }}
        use_vertex: ${{ inputs.use_vertex }}
        bedrock_region: ${{ inputs.bedrock_region }}
        vertex_project_id: ${{ inputs.vertex_project_id }}
        vertex_region: ${{ inputs.vertex_region }}
        model: ${{ inputs.model }}
        allowed_tools: "Bash(git:*),Read,Write,Edit"
        prompt_file: /tmp/changelog_prompt.md

    - name: Set outputs
      id: output
      shell: bash
      run: |
        # Get the changelog content from Claude's output (should be printed to stdout)
        # The claude-code-base-action will have already executed and generated output
        
        # Set basic outputs
        echo "changes_count=${{ steps.prepare.outputs.changes_count }}" >> $GITHUB_OUTPUT
        echo "from_tag=${{ steps.prepare.outputs.from_tag }}" >> $GITHUB_OUTPUT  
        echo "to_ref=${{ steps.prepare.outputs.to_ref }}" >> $GITHUB_OUTPUT
        
        # Note: The actual changelog content will come from Claude's direct output
        # No file persistence needed - Claude will output the changelog directly
